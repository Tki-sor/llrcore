package com.tkisor.llrcore.gtm.registry;

import com.tkisor.llrcore.LlrCore;
import com.tkisor.llrcore.gtm.common.data.LLRMachines;
import com.tkisor.llrcore.gtm.common.machine.multiblock.electric.NetworkStoreMultiblockMachine;
import com.tkisor.llrcore.gtm.common.machine.multiblock.electric.SlaughterHouseMachine;
import com.tkisor.llrcore.gtm.common.machine.multiblock.electric.VoidMinerMachine;
import com.tkisor.llrcore.gtm.common.machine.multiblock.electric.VoidOilDrillMachine;
import com.tkisor.llrcore.gtm.common.machine.multiblock.steam.SteamMultiblockMachine;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.data.RotationState;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.CoilWorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.machine.multiblock.WorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.recipe.OverclockingLogic;
import com.gregtechceu.gtceu.api.recipe.modifier.ModifierFunction;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeModifiers;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.world.level.block.Blocks;

import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
import static com.gregtechceu.gtceu.common.data.GTBlocks.*;
import static com.gregtechceu.gtceu.common.data.GTMaterialBlocks.MATERIAL_BLOCKS;
import static com.tkisor.llrcore.api.registries.LLRRegistration.LLR;
import static net.minecraft.world.level.block.Blocks.OAK_PLANKS;

public class LLRMultiblockMachines {

    static {
        LLR.creativeModeTab(() -> LLRCreativeModeTabs.MACHINE);
    }

    public static final MultiblockMachineDefinition sifter_factory = LLR.multiblock("sifter_factory", CoilWorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("llrcore.t0.best_tech")
                            .withStyle(ChatFormatting.GRAY),
                    Component.translatable("llrcore.machine.parallel.tip", 36)
                            .withStyle(ChatFormatting.GOLD),
                    Component.translatable("llrcore.machine.sifter_factory.tip.1"),
                    Component.translatable("llrcore.machine.sifter_factory.tip.2"),
                    Component.translatable("llrcore.machine.sifter_factory.tip.3"))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(LLRRecipeTypes.sieve_factory)
            .recipeModifiers(
                    (machine, recipe) -> LLRRecipeModifiers.accurateParallel(machine, recipe, 36)
                            .andThen(ModifierFunction.builder().durationMultiplier((double) 20 / recipe.duration).build()))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("xxxxx", "xxxxx", "ooooo", "xxxxx", "xxxxx")
                    .aisle("fxxxf", "f   f", "ovvvo", "x###x", "x   x")
                    .aisle("fxxxf", "f   f", "ovvvo", "x###x", "x   x")
                    .aisle("fxxxf", "f   f", "ovvvo", "x###x", "x   x")
                    .aisle("fxxxf", "f   f", "ovvvo", "x###x", "x   x")
                    .aisle("xxxxx", "xx@xx", "ooooo", "xxxxx", "xxxxx")
                    .where("x", Predicates.blocks(GTBlocks.MACHINE_CASING_ULV.get()))
                    .where("v", Predicates.frames(GTMaterials.Steel))
                    .where("o", Predicates.heatingCoils())
                    .where("f", Predicates.blocks(GTBlocks.MACHINE_CASING_ULV.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY)
                                    .setMaxGlobalLimited(2))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS)))
                    .where("#", Predicates.any())
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/voltage/ulv/bottom"),
                    GTCEu.id("block/multiblock/generator/large_steam_turbine")
            )
            .register();

    public static final MultiblockMachineDefinition hammer_factory = LLR.multiblock("hammer_factory", WorkableElectricMultiblockMachine::new).tooltips(
                    Component.translatable("llrcore.t0.best_tech")
                            .withStyle(ChatFormatting.GRAY),
                    Component.translatable("llrcore.machine.parallel.tip", 9)
                            .withStyle(ChatFormatting.GOLD),
                    Component.translatable("llrcore.machine.hammer_factory.tip.1"),
                    Component.translatable("llrcore.machine.hammer_factory.tip.2"))
            .tooltipBuilder(LLRMachines.LLR_ADD).rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(LLRRecipeTypes.hammer_factory)
            .recipeModifiers((machine, recipe) -> LLRRecipeModifiers.accurateParallel(machine, recipe, 9)
                    .andThen(ModifierFunction.builder().durationMultiplier((double) 60 / recipe.duration).build()))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("###f###", "###x###", "###x###", "###x###", "###x###", "###x###", "###x###")
                    .aisle("#  o  #", "#     #", "#     #", "#     #", "#     #", "#     #", "#  x  #")
                    .aisle("# ooo #", "#     #", "# ooo #", "#     #", "#     #", "#     #", "#  x  #")
                    .aisle("fooooof", "x     x", "x ooo x", "x  v  x", "x  v  x", "x  v  x", "xxxxxxx")
                    .aisle("# ooo #", "#     #", "# ooo #", "#     #", "#     #", "#     #", "#  x  #")
                    .aisle("#  o  #", "#     #", "#     #", "#     #", "#     #", "#     #", "#  x  #")
                    .aisle("###@###", "###x###", "###x###", "###x###", "###x###", "###x###", "###x###")
                    .where("x", Predicates.blocks(GTBlocks.MACHINE_CASING_ULV.get()))
                    .where("v", Predicates.frames(GTMaterials.Steel))
                    .where("o", Predicates.blocks(MATERIAL_BLOCKS.get(TagPrefix.block, GTMaterials.Steel).get()))
                    .where("f", Predicates.abilities(PartAbility.INPUT_ENERGY)
                            .setMaxGlobalLimited(1)
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS)
                                    .setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS)
                                    .setMaxGlobalLimited(1)))
                    .where("#", Predicates.any())
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/voltage/ulv/bottom"),
                    GTCEu.id("block/multiblock/generator/large_steam_turbine"))
            .register();

    public static final MultiblockMachineDefinition large_thermoelectric_generator = LLR.multiblock("large_thermoelectric_generator", WorkableElectricMultiblockMachine::new)
            .tooltips(Component.literal("根据输入流体之间的温差进行发电"))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(LLRRecipeTypes.large_thermoelectric_generator)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("xxxxx", "xxxxx", "xxxxx", "xxxxx", "xxxxx")
                    .aisle("fxxxf", "x o x", "x o x", "x o x", "x o x")
                    .aisle("fxxxf", "x o x", "x o x", "x o x", "x o x")
                    .aisle("fxxxf", "x o x", "x o x", "x o x", "x o x")
                    .aisle("xx@xx", "xxxxx", "xxxxx", "xxxxx", "xxxxx")
                    .where("x", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where("o", Predicates.blocks(Blocks.QUARTZ_BLOCK))
                    .where("f", Predicates.abilities(PartAbility.IMPORT_FLUIDS)
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS))
                            .or(Predicates.abilities(PartAbility.OUTPUT_ENERGY)))
                    .where("#", Predicates.any()).where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/voltage/ulv/bottom"),
                    GTCEu.id("block/multiblock/generator/large_steam_turbine")
            )
            .register();

    public static final MultiblockMachineDefinition MARTIAL_MORALITY_EYE = LLR.multiblock("martial_morality_eye", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(LLRRecipeTypes.martial_morality_eye)
            .appearanceBlock(CASING_BRONZE_BRICKS)
            .tooltips(Component.translatable("llrcore.t0.big_tech")
                    .withStyle(style -> style.withColor(0xf3b740)))
            .tooltipBuilder(LLRMachines.TST_ADD)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle("###############A#A###############", "#############BBABABB#############", "############B##CCC##B############", "#################################", "######A###################A######", "#######C#################C#######", "####A#######################A####", "#####C#####################C#####", "#################################", "#################################", "#################################", "#################################", "##B###########################B##", "#B#############################B#", "#B#############################B#", "AAC###########################CAA", "#BC###########################CB#", "AAC###########################CAA", "#B#############################B#", "#B#############################B#", "##B###########################B##", "#################################", "#################################", "#################################", "#################################", "#####C#####################C#####", "####A#######################A####", "#######C#################C#######", "######A###################A######", "#################################", "############B##CCC##B############", "#############BBABABB#############", "###############A#A###############")
                    .aisle("############AAAAAAAAA############", "#########AAAABAABAABAAAA#########", "#######AAA##B#CDDDC#B##AAA#######", "######AA#################AA######", "#####AA###################AA#####", "####AA#C#################C#AA####", "###AA#######################AA###", "##AA#C#####################C#AA##", "##A###########################A##", "#AA###########################AA#", "#A#############################A#", "#A#############################A#", "AAB###########################BAA", "AB#############################BA", "AAC###########################CAA", "AAD###########################DAA", "ABD###########################DBA", "AAD###########################DAA", "AAC###########################CAA", "AB#############################BA", "AAB###########################BAA", "#A#############################A#", "#A#############################A#", "#AA###########################AA#", "##A###########################A##", "##AA#C#####################C#AA##", "###AA#######################AA###", "####AA#C#################C#AA####", "#####AA###################AA#####", "######AA#################AA######", "#######AAA##B#CDDDC#B##AAA#######", "#########AAAABAABAABAAAA#########", "############AAAAAAAAA############")
                    .aisle
                    .aisle("############AAAAAAAAA############", "#########AAAABAABAABAAAA#########", "#######AAA##B#CDDDC#B##AAA#######", "######AA#################AA######", "#####AA###################AA#####", "####AA#C#################C#AA####", "###AA#######################AA###", "##AA#C#####################C#AA##", "##A###########################A##", "#AA###########################AA#", "#A#############################A#", "#A#############################A#", "AAB###########################BAA", "AB#############################BA", "AAC###########################CAA", "AAD###########################DAA", "ABD###########################DBA", "AAD###########################DAA", "AAC###########################CAA", "AB#############################BA", "AAB###########################BAA", "#A#############################A#", "#A#############################A#", "#AA###########################AA#", "##A###########################A##", "##AA#C#####################C#AA##", "###AA#######################AA###", "####AA#C#################C#AA####", "#####AA###################AA#####", "######AA#################AA######", "#######AAA##B#CDDDC#B##AAA#######", "#########AAAABAABAABAAAA#########", "############AAAAAAAAA############")
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle
                    .aisle("#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "###############A#A###############", "###############A#A###############", "###############A#A###############", "################B################", "################B################", "#############BBBBBBB#############", "############BB#####BB############", "############B##CCC##B############", "#######AAA##B#CDDDC#B##AAA#######", "##########BBB#CDDDC#BBB##########", "#######AAA##B#CDDDC#B##AAA#######", "############B##CCC##B############", "############BB#####BB############", "#############BBBBBBB#############", "################B################", "################B################", "###############A#A###############", "###############A#A###############", "###############A#A###############", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################")
                    .aisle("#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "###############A#A###############", "###############A#A###############", "###############A#A###############", "###############A#A###############", "##############BBBBB##############", "#############BBABABB#############", "#########AAAABAABAABAAAA#########", "#############BBBBBBB#############", "#########AAAABAABAABAAAA#########", "#############BBABABB#############", "##############BBBBB##############", "###############A#A###############", "###############A#A###############", "###############A#A###############", "###############A#A###############", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################", "#################################")
                    .aisle
                    .where("A", Predicates.blocks(Blocks.BRICKS))
                    .where("#", Predicates.any())
                    .where("B", Predicates.blocks(OAK_PLANKS))
                    .where("C", Predicates.blocks(Blocks.LAPIS_BLOCK))
                    .where("D", Predicates.blocks(Blocks.BOOKSHELF))
                    .where("E", Predicates.blocks(Blocks.CHISELED_STONE_BRICKS))
                    .where("F", Predicates.blocks(CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS)
                                    .setPreviewCount(9))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY)
                                    .setMaxGlobalLimited(2))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"),
                    GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition SLAUGHTER_HOUSE = LLR.multiblock("slaughter_house", SlaughterHouseMachine::new)
            .tooltips(Component.translatable("llrcore.machine.slaughter_house.tip.0")
                            .withStyle(style -> style.withColor(0xf3b740)),
                    Component.translatable("llrcore.machine.slaughter_house.tip.1"),
                    Component.translatable("llrcore.machine.slaughter_house.tip.2"),
                    Component.translatable("llrcore.machine.slaughter_house.tip.3"),
                    Component.translatable("llrcore.machine.slaughter_house.tip.4"),
                    Component.translatable("llrcore.machine.slaughter_house.tip.5"))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(LLRRecipeTypes.slaughter_house)
            .recipeModifier(SlaughterHouseMachine::recipeModifier)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("fffffff", "fffffff", "zbbbbbz", "zbbbbbz", "zbbbbbz", "zbbbbbz", "zbbbbbz", "mmmmmmm")
                    .aisle("fxxxxxf", "fvvvvvf", "bvvvvvb", "bvvvvvb", "bvvvvvb", "bvvvvvb", "bvvvvvb", "mmmmmmm")
                    .aisle("fxxxxxf", "fv   vf", "bv   vb", "bv   vb", "bv   vb", "bv   vb", "bv   vb", "mmmmmmm")
                    .aisle("fxxxxxf", "fv   vf", "bv   vb", "bv   vb", "bv   vb", "bv   vb", "bv   vb", "mmmmmmm")
                    .aisle("fxxxxxf", "fv   vf", "bv   vb", "bv   vb", "bv   vb", "bv   vb", "bv   vb", "mmmmmmm")
                    .aisle("fxxxxxf", "fvvvvvf", "bvvvvvb", "bvvvvvb", "bvvvvvb", "bvvvvvb", "bvvvvvb", "mmmmmmm")
                    .aisle("fff@fff", "fffffff", "zbbbbbz", "zbbbbbz", "zbbbbbz", "zbbbbbz", "zbbbbbz", "mmmmmmm")
                    .where("x", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where("v", Predicates.blocks(Blocks.IRON_BARS))
                    .where("z", Predicates.frames(GTMaterials.Steel))
                    .where("m", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where("b", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("f", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY)
                                    .setMaxGlobalLimited(2)
                                    .setPreviewCount(2))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)
                                    .setExactLimit(1)
                                    .setPreviewCount(1)))
                    .where("#", Predicates.any())
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition void_miner_1 = LLR.multiblock("void_miner_1", holder -> new VoidMinerMachine(holder, 2, GTValues.HV)).tooltips(
                    Component.translatable("llrcore.machine.void_miner.tip.0").withStyle(ChatFormatting.GRAY), Component.translatable("llrcore.machine.void_miner.tip.1"), Component.translatable("llrcore.machine.void_miner.tip.2"), Component.translatable("llrcore.machine.void_miner.tip.3"), Component.translatable("llrcore.machine.void_miner.tip.4", 2), Component.translatable("llrcore.machine.void_miner.tip.5")).tooltipBuilder(LLRMachines.LLR_ADD).rotationState(RotationState.NON_Y_AXIS).appearanceBlock(GTBlocks.CASING_STEEL_SOLID).recipeTypes(LLRRecipeTypes.void_miner).recipeModifier(VoidMinerMachine::recipeModifier).pattern(
                    definition -> FactoryBlockPattern.start().aisle("fff", " x ", " x ", " x ", "   ", "   ", "   ").aisle("fff", "xox", "xox", "xox", " x ", " x ", " x ").aisle("f@f", " x ", " x ", " x ", "   ", "   ", "   ").where("x", Predicates.frames(GTMaterials.StainlessSteel)).where("o", Predicates.blocks(GTBlocks.MACHINE_CASING_HV.get())).where(
                                    "f", Predicates.blocks(GTBlocks.MACHINE_CASING_HV.get()).or(
                                            Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(1)).or(Predicates.autoAbilities(definition.getRecipeTypes())).or(
                                            Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1).setPreviewCount(1)))
                            .where("#", Predicates.any()).where(" ", Predicates.air()).where("@", Predicates.controller(Predicates.blocks(definition.get()))).build())
            .workableCasingModel(
                    GTCEu.id("block/casings/voltage/hv/bottom"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition void_miner_2 = LLR.multiblock("void_miner_2", holder -> new VoidMinerMachine(holder, 3, GTValues.EV))
            .tooltips(Component.translatable("llrcore.machine.void_miner.tip.0")
                            .withStyle(ChatFormatting.GRAY),
                    Component.translatable("llrcore.machine.void_miner.tip.1"),
                    Component.translatable("llrcore.machine.void_miner.tip.2"),
                    Component.translatable("llrcore.machine.void_miner.tip.3"),
                    Component.translatable("llrcore.machine.void_miner.tip.4", 3),
                    Component.translatable("llrcore.machine.void_miner.tip.5"))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(LLRRecipeTypes.void_miner)
            .recipeModifier(VoidMinerMachine::recipeModifier)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("fff", " x ", " x ", " x ", "   ", "   ", "   ")
                    .aisle("fff", "xox", "xox", "xox", " x ", " x ", " x ")
                    .aisle("f@f", " x ", " x ", " x ", "   ", "   ", "   ")
                    .where("x", Predicates.frames(GTMaterials.Titanium))
                    .where("o", Predicates.blocks(MACHINE_CASING_EV.get()))
                    .where("f", Predicates.blocks(MACHINE_CASING_EV.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY)
                                    .setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)
                                    .setExactLimit(1)
                                    .setPreviewCount(1)))
                    .where("#", Predicates.any())
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/voltage/ev/bottom"),
                    GTCEu.id("block/multiblock/gcym/large_cutter")
            )
            .register();

    public static final MultiblockMachineDefinition void_oil_drill_1 = LLR.multiblock("void_oil_drill_1", holder -> new VoidOilDrillMachine(holder, 5000, GTValues.MV))
            .tooltips(Component.translatable("llrcore.machine.void_oil_drill.tip.0")
                            .withStyle(ChatFormatting.GRAY),
                    Component.translatable("llrcore.machine.void_oil_drill.tip.1"),
                    Component.translatable("llrcore.machine.void_oil_drill.tip.2"),
                    Component.translatable("llrcore.machine.void_oil_drill.tip.3"),
                    Component.translatable("llrcore.machine.void_oil_drill.tip.4", 5000),
                    Component.translatable("llrcore.machine.void_oil_drill.tip.5"))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(LLRRecipeTypes.void_oil_drill)
            .recipeModifier(VoidOilDrillMachine::recipeModifier)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("fff", " x ", " x ", " x ", "   ", "   ", "   ")
                    .aisle("fff", "xox", "xox", "xox", " x ", " x ", " x ")
                    .aisle("f@f", " x ", " x ", " x ", "   ", "   ", "   ")
                    .where("x", Predicates.frames(GTMaterials.Steel))
                    .where("o", Predicates.blocks(MACHINE_CASING_MV.get()))
                    .where("f", Predicates.blocks(MACHINE_CASING_MV.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY)
                                    .setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)
                                    .setExactLimit(1)
                                    .setPreviewCount(1)))
                    .where("#", Predicates.any())
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/voltage/mv/bottom"),
                    GTCEu.id("block/multiblock/gcym/large_cutter")
            )
            .register();

    public static final MultiblockMachineDefinition void_gas_collection_chamber = LLR.multiblock("void_gas_collection_chamber", WorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("llrcore.machine.void_gas_collection_chamber.tip.0")
                            .withStyle(ChatFormatting.GRAY),
                    Component.translatable("llrcore.machine.void_gas_collection_chamber.tip.1"),
                    Component.translatable("llrcore.machine.void_gas_collection_chamber.tip.2"),
                    Component.translatable("llrcore.machine.void_gas_collection_chamber.tip.3")
                            .withStyle(ChatFormatting.GOLD),
                    Component.translatable("llrcore.machine.void_gas_collection_chamber.tip.4")
                            .withStyle(ChatFormatting.GOLD))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.ALL)
            .recipeType(LLRRecipeTypes.void_gas_collection_chamber)
            .recipeModifier((machine, recipe) -> GTRecipeModifiers.ELECTRIC_OVERCLOCK
                    .apply(OverclockingLogic.create(0.167, 4, true))
                    .getModifier(machine, recipe)
                    .andThen(LLRRecipeModifiers.accurateParallel(machine, recipe, 1))
            )
            .appearanceBlock(PLASTCRETE)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .aisle("abbba", "bx xb", "b   b", "bv vb", "abbba")
                    .aisle("abcba", "bx xb", "c   c", "bv vb", "abcba")
                    .aisle("abcba", "bx xb", "c   c", "bv vb", "abcba")
                    .aisle("abcba", "bx xb", "c   c", "bv vb", "abcba")
                    .aisle("abbba", "bx xb", "b   b", "bv vb", "abbba")
                    .aisle("aaaaa", "abbba", "ab@ba", "abbba", "aaaaa")
                    .where("a", Predicates.blocks(PLASTCRETE.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)
                                    .setExactLimit(1)))
                    .where("b", Predicates.blocks(FILTER_CASING.get()))
                    .where("c", Predicates.blocks(CLEANROOM_GLASS.get()))
                    .where("x", Predicates.blocks(HERMETIC_CASING_HV.get()))
                    .where("v", Predicates.blocks(HERMETIC_CASING_MV.get()))
                    .where("#", Predicates.any())
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/cleanroom/plascrete"),
                    GTCEu.id("block/multiblock/fusion_reactor")
            )
            .register();

    public static final MultiblockMachineDefinition FUEL_REFINING_FACTORY = LLR.multiblock("fuel_refining_factory", CoilWorkableElectricMultiblockMachine::new)
            .tooltips()
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(LLRRecipeTypes.fuel_refining)
            .recipeModifier(GTRecipeModifiers::ebfOverclock)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("#####ABBBA#####", "#####BCCCB#####", "#####BCCCB#####", "#####BCCCB#####", "#####ABBBA#####", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############")
                    .aisle("###DDBEEEBDD###", "###DEEDFDEED###", "###DDBDGDBDD###", "###DBBDBDBBD###", "######EAE######", "######EEE######", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############")
                    .aisle("####BBEEEBB####", "###EHHBFBHHE###", "####BBBCBBB####", "###E##BBB##E###", "######BBB######", "######EEE######", "######EEE######", "####BBBBBBB####", "####DDDDDDD####", "####EEEEEEE####", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############")
                    .aisle("#D#B##EEE##B#D#", "#DEHBBBFBBBHED#", "#D#B###C###B#D#", "#DED#######DED#", "###D#######D###", "###D##EEE##D###", "###D##DFD##D###", "###BEEECEEEB###", "###DHHHHHHHD###", "###EBBBBBBBE###", "######D#D######", "######D#D######", "######D#D######", "######D#D######", "######EEE######", "######DDD######", "######BBB######", "###############", "###############")
                    .aisle("#DB###EEE###BD#", "#EHB##DFD##BHE#", "#DB####C####BD#", "#B###########B#", "###############", "######EEE######", "######DFD######", "##BE###C###EB##", "##DHBBBBBBBHD##", "##EBF#####FBE##", "####F#####F####", "####F#####F####", "####EEEEEEE####", "###############", "#####EEEEE#####", "#####DHHHD#####", "#####BACAB#####", "######ACA######", "###############")
                    .aisle("ABB###EEE###BBA", "BEHB##DFD##BHEB", "BBB####C####BBB", "BB###########BB", "A#############A", "######EEE######", "######DFD######", "##BE###C###EB##", "##DHB#####BHD##", "##EB#######BE##", "###############", "#####BBBBB#####", "####EAAAAAE####", "###############", "####EBEEEBE####", "####DHDFDHD####", "####BB#C#BB####", "#####EEEEE#####", "######EEE######")
                    .aisle("BEEEEEEEEEEEEEB", "IDBBDDDFDDDBBDJ", "IDB###DKD###BDJ", "IDB###DKD###BDJ", "BEB###DKD###BEB", "#EEEEEDKDEEEEE#", "##EDDDDFDDDDE##", "##BE##DKD##EB##", "##DHB#DKD#BHD##", "##EB##DKD##BE##", "###D##DKD##D###", "###D#BDKDB#D###", "###DEADKDAED###", "###D##DKD##D###", "###EEEDKDEEE###", "###DHDLLLDHD###", "###BA#LLL#AB###", "####AELLLEA####", "#####EMMME#####")
                    .aisle("BEEEEEEEEEEEEEB", "IFFFFFFFFFFFFFJ", "IGCCCCKFKCCCCGJ", "IBB###KFK###BBJ", "BAB###KFK###BAB", "#EEEEEKFKEEEEE#", "##EFFFFFFFFFE##", "##BCCCKFKCCCB##", "##DHB#KFK#BHD##", "##EB##KFK##BE##", "######KFK######", "#####BKFKB#####", "####EAKFKAE####", "######KFK######", "###EEEKFKEEE###", "###DHFLLLFHD###", "###BCCLOLCCB###", "####CELLLEC####", "#####EMMME#####")
                    .aisle("BEEEEEEEEEEEEEB", "IDBBDDDFDDDBBDJ", "IDB###DKD###BDJ", "IDB###DKD###BDJ", "BEB###DKD###BEB", "#EEEEEDKDEEEEE#", "##EDDDDFDDDDE##", "##BE##DKD##EB##", "##DHB#DKD#BHD##", "##EB##DKD##BE##", "###D##DKD##D###", "###D#BDKDB#D###", "###DEADKDAED###", "###D##DKD##D###", "###EEEDKDEEE###", "###DHDLLLDHD###", "###BA#LLL#AB###", "####AELLLEA####", "#####EMMME#####")
                    .aisle("ABB###EEE###BBA", "BEHB##DFD##BHEB", "BBB####C####BBB", "BB###########BB", "A#############A", "######EEE######", "######DFD######", "##BE###C###EB##", "##DHB#####BHD##", "##EB#######BE##", "###############", "#####BBBBB#####", "####EAAAAAE####", "###############", "####EBEEEBE####", "####DHDFDHD####", "####BB#C#BB####", "#####EEEEE#####", "######EEE######")
                    .aisle("#DB###EEE###BD#", "#EHB##DFD##BHE#", "#DB####C####BD#", "#B###########B#", "###############", "######EEE######", "######DFD######", "##BE###C###EB##", "##DHBBBBBBBHD##", "##EBF#####FBE##", "####F#####F####", "####F#####F####", "####EEEEEEE####", "###############", "#####EEEEE#####", "#####DHHHD#####", "#####BACAB#####", "######ACA######", "###############")
                    .aisle("#D#B##EEE##B#D#", "#DEHBBBFBBBHED#", "#D#B###C###B#D#", "#DED#######DED#", "###D#######D###", "###D##EEE##D###", "###D##DFD##D###", "###BEEECEEEB###", "###DHHHHHHHD###", "###EBBBBBBBE###", "######D#D######", "######D#D######", "######D#D######", "######D#D######", "######EEE######", "######DDD######", "######BBB######", "###############", "###############")
                    .aisle("####BBEEEBB####", "###EHHBFBHHE###", "####BBBCBBB####", "###E##BBB##E###", "######BBB######", "######EEE######", "######EEE######", "####BBBBBBB####", "####DDDDDDD####", "####EEEEEEE####", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############")
                    .aisle("###DDBEEEBDD###", "###DEEDFDEED###", "###DDBDGDBDD###", "###DBBDBDBBD###", "######EAE######", "######EEE######", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############")
                    .aisle("####DNNNNND####", "####ENN@NNE####", "####DNNNNND####", "####EEDEDEE####", "######EAE######", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############", "###############")
                    .where("#", Predicates.any())
                    .where("A", Predicates.blocks(CASING_STEEL_GEARBOX.get()))
                    .where("B", Predicates.blocks(CASING_STEEL_SOLID.get()))
                    .where("C", Predicates.blocks(MATERIAL_BLOCKS.get(TagPrefix.block, GTMaterials.BlackSteel).get()))
                    .where("D", Predicates.frames(GTMaterials.BlackSteel))
                    .where("E", Predicates.blocks(FIREBOX_STEEL.get()))
                    .where("F", Predicates.blocks(CASING_STEEL_PIPE.get()))
                    .where("G", Predicates.blocks(HERMETIC_CASING_LV.get()))
                    .where("H", Predicates.heatingCoils())
                    .where("I", Predicates.blocks(MATERIAL_BLOCKS.get(TagPrefix.block, GTMaterials.RedSteel).get()))
                    .where("J", Predicates.blocks(MATERIAL_BLOCKS.get(TagPrefix.block, GTMaterials.BlueSteel).get()))
                    .where("K", Predicates.blocks(HERMETIC_CASING_HV.get()))
                    .where("L", Predicates.blocks(FIREBOX_STEEL.get()))
                    .where("M", Predicates.abilities(PartAbility.MUFFLER)
                            .setExactLimit(9))
                    .where("N", Predicates.blocks(CASING_STEEL_SOLID.get())
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)
                                    .setExactLimit(1)).or(Predicates.autoAbilities(definition.getRecipeTypes())))
                    .where("O", Predicates.blocks(FIREBOX_STEEL.get())).where("@", Predicates.controller(Predicates.blocks(definition.get()))).build())
            .additionalDisplay((machine, l) -> {
                if (machine.isFormed() && machine instanceof CoilWorkableElectricMultiblockMachine cmachine) {
                    l.add(Component.translatable("gtceu.multiblock.blast_furnace.max_temperature",
                            Component.literal(cmachine.getCoilType().getCoilTemperature() + "K")
                                    .withStyle(ChatFormatting.RED))
                    );
                }
            })
            .workableCasingModel(
                    GTCEu.id("block/casings/solid/machine_casing_solid_steel"),
                    GTCEu.id("block/multiblock/fusion_reactor")
            )
            .register();

    public static final MultiblockMachineDefinition Quantum_Force_Transformer = LLR.multiblock("quantum_force_transformer", CoilWorkableElectricMultiblockMachine::new)
            .tooltips(Component.translatable("llrcore.machine.tooltip.type_abb",
                            Component.translatable("gtceu.quantum_force_transformer")
                                    .withStyle(ChatFormatting.YELLOW),
                            Component.literal("QFT")
                                    .withStyle(ChatFormatting.YELLOW)),
                    Component.translatable("llrcore.machine.quantum_force_transformer.tip.0")
                            .withStyle(style -> style.withColor(0xf3b740)),
                    Component.translatable("llrcore.machine.quantum_force_transformer.tip.1"))
            .tooltipBuilder(LLRMachines.GTPP_ADD)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(LLRRecipeTypes.quantum_force_transformer)
            // .recipeModifier(GTRecipeModifiers::ebfOverclock)
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("      A A      ", "      A A      ", "      A A      ", "   A BA AB A   ", "   ABBAAABBA   ", "   BBBAAABBB   ", "   BBBBABBBB   ", "      BAB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "  A         A  ", "  A         A  ", "  B         B  ", "  BAAAAAAAAAB  ", "   AAABBBAAA   ", "      BAB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", " A           A ", " A           A ", " B           B ", " BAA       AAB ", "  AA       AA  ", "    AA   AA    ", "      BAB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("A             A", "A             A", "A             A", "A             A", "A             A", "B             B", "BAA         AAB", " AA         AA ", "   AA     AA   ", "     BAAAB     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("      HHH      ", "      EEE      ", "      EEE      ", "      EEE      ", "B     DDD     B", "B     EEE     B", "BA    DDD    AB", " A    EEE    A ", "  AA  EEE  AA  ", "    BAEEEAB    ", "      DDD      ", "      EEE      ", "      EEE      ", "      EEE      ", "      DDD      ", "      EEE      ", "      DDD      ", "      EEE      ", "      EEE      ", "      EEE      ", "      HHH      ")
                    .aisle("     HHHHH     ", "     ECCCE     ", "     ECCCE     ", "B    ECCCE    B", "B    D   D    B", "B    ECCCE    B", "BA   D   D   AB", " A   ECCCE   A ", "  A  ECCCE  A  ", "   BAECCCEAB   ", "     D   D     ", "     ECCCE     ", "     ECCCE     ", "     ECCCE     ", "     D   D     ", "     ECCCE     ", "     D   D     ", "     ECCCE     ", "     ECCCE     ", "     ECCCE     ", "     HHHHH     ")
                    .aisle("    HHHHHHH    ", "    EC   CE    ", "    EC   CE    ", "A   EC   CE   A", "A   D     D   A", "A   EC   CE   A", "BA  D     D  AB", "BB  EC   CE  BB", " B  EC   CE  B ", "  BAEC   CEAB  ", "    D     D    ", "    EC   CE    ", "    EC   CE    ", "    EC   CE    ", "    D     D    ", "    EC   CE    ", "    D     D    ", "    EC   CE    ", "    EC   CE    ", "    ECCCCCE    ", "    HHHHHHH    ")
                    .aisle("    HHHHHHH    ", "    EC   CE    ", "    EC   CE    ", "    EC   CE    ", "A   D     D   A", "A   EC   CE   A", "AA  D     D  AA", "AB  EC   CE  BA", " A  EC   CE  A ", "  AAEC   CEAA  ", "    D     D    ", "    EC   CE    ", "    EC   CE    ", "    EC   CE    ", "    D     D    ", "    EC   CE    ", "    D     D    ", "    EC   CE    ", "    EC   CE    ", "    ECCCCCE    ", "    HHHHHHH    ")
                    .aisle("    HHHHHHH    ", "    EC   CE    ", "    EC   CE    ", "A   EC   CE   A", "A   D     D   A", "A   EC   CE   A", "BA  D     D  AB", "BB  EC   CE  BB", " B  EC   CE  B ", "  BAEC   CEAB  ", "    D     D    ", "    EC   CE    ", "    EC   CE    ", "    EC   CE    ", "    D     D    ", "    EC   CE    ", "    D     D    ", "    EC   CE    ", "    EC   CE    ", "    ECCCCCE    ", "    HHHHHHH    ")
                    .aisle("     HHHHH     ", "     ECCCE     ", "     ECCCE     ", "B    ECCCE    B", "B    D   D    B", "B    ECCCE    B", "BA   D   D   AB", " A   ECCCE   A ", "  A  ECCCE  A  ", "   BAECCCEAB   ", "     D   D     ", "     ECCCE     ", "     ECCCE     ", "     ECCCE     ", "     D   D     ", "     ECCCE     ", "     D   D     ", "     ECCCE     ", "     ECCCE     ", "     ECCCE     ", "     HHHHH     ")
                    .aisle("      H@H      ", "      EEE      ", "      EEE      ", "      EEE      ", "B     DDD     B", "B     EEE     B", "BA    DDD    AB", " A    EEE    A ", "  AA  EEE  AA  ", "    BAEEEAB    ", "      DDD      ", "      EEE      ", "      EEE      ", "      EEE      ", "      DDD      ", "      EEE      ", "      DDD      ", "      EEE      ", "      EEE      ", "      EEE      ", "      HHH      ")
                    .aisle("A             A", "A             A", "A             A", "A             A", "A             A", "B             B", "BAA         AAB", " AA         AA ", "   AA     AA   ", "     BAAAB     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", " A           A ", " A           A ", " B           B ", " BAA       AAB ", "  AA       AA  ", "    AA   AA    ", "      BAB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "  A         A  ", "  A         A  ", "  B         B  ", "  BAAAAAAAAAB  ", "   AAABBBAAA   ", "      BAB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    A     A    ", "    A     A    ", "    A     A    ", "   BA     AB   ", "   BABBABBAB   ", "   BAAAAAAAB   ", "   BBBBABBBB   ", "      BAB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .where("A", Predicates.blocks(PLASTCRETE.get()))
                    .where("B", Predicates.blocks(FILTER_CASING.get()))
                    .where("C", Predicates.heatingCoils())
                    .where("D", Predicates.blocks(CASING_STAINLESS_CLEAN.get()))
                    .where("E", Predicates.blocks(CASING_LAMINATED_GLASS.get()))
                    .where("H", Predicates.blocks(CASING_STAINLESS_CLEAN.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY)
                                    .setMaxGlobalLimited(4)
                                    .setMinGlobalLimited(1)
                                    .setPreviewCount(2))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS)
                                    .setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS)
                                    .setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS)
                                    .setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS)
                                    .setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)
                                    .setExactLimit(1)
                                    .setPreviewCount(1)))
                    .where(" ", Predicates.any())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"),
                    GTCEu.id("block/multiblock/fusion_reactor")
            )
            .register();

    public static final MultiblockMachineDefinition steam_blast_furnace = LLR.multiblock("steam_blast_furnace", SteamMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(LLRRecipeTypes.steam_blast_furnace, GTRecipeTypes.PRIMITIVE_BLAST_FURNACE_RECIPES)
            .appearanceBlock(CASING_BRONZE_BRICKS)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.primitive_blast_furnace"),
                    Component.translatable("gtceu.steam_blast_furnace")))
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("xxx", "fff", "fff", "mmm")
                    .aisle("xxx", "f f", "f f", "mom")
                    .aisle("xxx", "f@f", "fff", "mmm")
                    .where("x", Predicates.blocks(FIREBOX_BRONZE.get()))
                    .where("f", Predicates.blocks(CASING_PRIMITIVE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS)
                                    .setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS)
                                    .setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM)
                                    .setMaxGlobalLimited(2)))
                    .where("m", Predicates.blocks(CASING_BRONZE_BRICKS.get()))
                    .where("o", Predicates.blocks(CASING_BRONZE_PIPE.get()))
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/solid/machine_primitive_bricks"),
                    GTCEu.id("block/multiblock/fusion_reactor")
            )
            .register();

    // 存储单元
    public static final MultiblockMachineDefinition storage_cell = LLR.multiblock("storage_cell", NetworkStoreMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(CASING_BRONZE_BRICKS)
            .recipeTypes(LLRRecipeTypes.storage_cell)
            .tooltips(
                    // Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    // Component.translatable("gtceu.primitive_blast_furnace"),
                    // Component.translatable("gtceu.steam_blast_furnace"))
            )
            .tooltipBuilder(LLRMachines.LLR_ADD)
            .pattern(definition -> FactoryBlockPattern.start(BACK, UP, LEFT)
                    .aisle("XX", "XX", "XX")
                    .aisle("NN", "@N", "NN")
                    .aisle("TJ", "TX", "TJ").setRepeatable(1, 16)
                    .aisle("HH", "HH", "HH")
                    .where("X", Predicates.blocks(FIREBOX_BRONZE.get()))
                    .where("N", Predicates.abilities(LLRPartAbility.NETWORK_STORE)
                            .setExactLimit(1)
                            .or(Predicates.blocks(FIREBOX_BRONZE.get())))
                    .where("T", Predicates.abilities(LLRPartAbility.STORE_CELL_HATCH))
                    .where("J", Predicates.blocks(FIREBOX_BRONZE.get()))
                    .where("H", Predicates.blocks(FIREBOX_BRONZE.get()))
                    .where("f", Predicates.blocks(CASING_PRIMITIVE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS)
                                    .setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS)
                                    .setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM)
                                    .setMaxGlobalLimited(2)))
                    .where("m", Predicates.blocks(CASING_BRONZE_BRICKS.get()))
                    .where("o", Predicates.blocks(CASING_BRONZE_PIPE.get()))
                    .where(" ", Predicates.air())
                    .where("@", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingModel(
                    GTCEu.id("block/casings/solid/machine_primitive_bricks"),
                    GTCEu.id("block/multiblock/fusion_reactor")
            )
            .register();

    public static void init() {
    }
}
